// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model playerCount {
  id          Int      @id @default(autoincrement())
  tetrisCount Int
  timeStamp   DateTime @default(now())
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  stats         UserStats?
  playerGames   Game[]     @relation("player")
  opponentGames Game[]     @relation("opponent")
}

model UserStats {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  wins       Int @default(0)
  losses     Int @default(0)
  draws      Int @default(0)
  totalGames Int @default(0)
  highScore  Int @default(0)
  rating     Int @default(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id String @id @default(uuid())

  playerId String
  player   User   @relation("player", fields: [playerId], references: [id])

  opponentId String?
  opponent   User?   @relation("opponent", fields: [opponentId], references: [id])

  playerScore   Int @default(0)
  opponentScore Int @default(0)

  gameState Json? // Current game state
  status    GameStatus @default(WAITING)
  winner    String? // User ID of the winner

  startedAt DateTime?
  endedAt   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum GameStatus {
  WAITING // Waiting for opponent
  ACTIVE // Game in progress
  FINISHED // Game completed
  ABANDONED // Game abandoned
}
